"""
MIT License

Copyright (c) 2021, Sohail Habib

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

------------------------------------------------------------------------------------------------------------------------

Malware Parser
===========
This class parses malware dataset
"""
import os
from io import StringIO
from pathlib import Path

import pandas as pd

from external_dataset_parsers.external_parser import ExternalParser
from utilities import io_utilities as io


class MalwareParser(ExternalParser):

    def __init__(self):
        return

    def get_feature_header(self):
        """Returns a list containing name of all features."""
        return ['battIsCharging',
                'battVoltage',
                'battTemp',
                'battLevel',
                'battLevelDiff',
                'binderTransaction',
                'binderReply',
                'binderAcquire',
                'binderRelease',
                'binderActiveNodes',
                'binderTotalNodes',
                'binderActiveRef',
                'binderTotalRef',
                'binderActiveDeath',
                'binderTotalDeath',
                'binderActiveTransaction',
                'binderTotalTransaction',
                'binderActiveTransactionComplete',
                'binderTotalTransactionComplete',
                'binderTotalNodesDiff',
                'binderTotalRefDiff',
                'binderTotalDeathDiff',
                'binderTotalTransactionDiff',
                'binderTotalTransactionCompleteDiff',
                'cpuUsage',
                'memActive',
                'memInactive',
                'memMapped',
                'memFreePages',
                'memAnonPages',
                'memFilePages',
                'memDirtyPages',
                'memWritebackPages',
                'networkTotalTXPackets',
                'networkTotalTXBytes',
                'networkTotalRXPackets',
                'networkTotalRXBytes',
                'networkTotalTXPacketsDiff',
                'networkTotalTXBytesDiff',
                'networkTotalRXPacketsDiff',
                'networkTotalRXBytesDiff',
                'permissions',
                'classification']

    def raw_to_feature_vectors(self, raw_data_path, output_path=None, limit=None):

        raw_data = Path(__file__).parent.parent.parent.parent / 'raw_data/malware_dataset/'

        users = io.get_file_list(raw_data)
        print("Users found: " + str(len(users)))
        csv_str = StringIO()
        csv_str.write('user, ')
        csv_str.write('%s' % ', '.join(map(str, self.get_feature_header())) + '\n')

        for u in users:
            user_data_path = os.path.join(raw_data, u)
            with open(user_data_path) as input_data:
                # Skips text before the beginning of the interesting block:
                for line in input_data:
                    if line.strip() == '@data':  # Or whatever test is needed
                        break
                for line in input_data:  # This keeps reading the file
                    fv = line
                    fv = fv.replace("true","1")
                    fv = fv.replace("false", "-1")
                    fv = fv.replace("positive", "1")
                    fv = fv.replace("negative", "-1")
                    fv = (u[:1] + ',' + fv + '\n')
                    fv = fv.replace("B", "1")
                    fv = fv.replace("M", "0")
                    csv_str.write(fv)

        csv_str.seek(0)
        df = pd.read_csv(csv_str, header=0, index_col=False)
        if output_path is not None:
            df.to_csv(output_path, index=False, mode='w+')
            print("Feature Generation Complete files are available at path", output_path)
        else:
            print("Feature Generation Complete")
        return df
